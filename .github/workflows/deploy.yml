name: Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-1
  PULUMI_VERSION: 3.78.1
  DOCKER_USERNAME: kaziiriad
  DOCKER_IMAGE_VERSION: dev_deploy

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # Set up Node.js for frontend
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      # Set up Python for backend
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'

      # Install frontend dependencies and run tests
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm test
      
      # Install backend dependencies and run tests
      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt
      
      - name: Run backend tests
        run: |
          cd backend
          pytest

      # Build Docker images
      - name: Build frontend Docker image
        run: |
          cd frontend
          docker build -t ${{ env.DOCKER_USERNAME }}/todo-frontend:${{ env.DOCKER_IMAGE_VERSION }} .
      
      - name: Build backend Docker image
        run: |
          cd backend
          docker build -t ${{ env.DOCKER_USERNAME }}/todo-backend:${{ env.DOCKER_IMAGE_VERSION }} .

  deploy-infrastructure:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3

      # Set up Python for Pulumi
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      # Install Pulumi
      - name: Install Pulumi
        run: |
          curl -fsSL https://get.pulumi.com | sh -s -- --version ${{ env.PULUMI_VERSION }}
          echo "$HOME/.pulumi/bin" >> $GITHUB_PATH
      
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      # Install Pulumi dependencies
      - name: Install Pulumi dependencies
        run: |
          cd app/infra
          pip install -r requirements.txt
      
      # Preview Pulumi changes
      - name: Preview infrastructure changes
        run: |
          cd app/infra
          pulumi stack select dev
          pulumi preview
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      
      # Deploy infrastructure with Pulumi
      - name: Deploy infrastructure
        run: |
          cd app/infra
          pulumi stack select dev
          pulumi up --yes
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      
      # Set Pulumi configuration
      - name: Set Pulumi configuration
        run: |
          cd app/infra
          pulumi stack select dev
          pulumi config set docker:username ${{ env.DOCKER_USERNAME }}
          pulumi config set docker:version ${{ env.DOCKER_IMAGE_VERSION }}
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
      
      # Export Pulumi outputs
      - name: Export Pulumi outputs
        id: pulumi-outputs
        run: |
          cd app/infra
          echo "ALB_DNS_NAME=$(pulumi stack output alb_dns_name)" >> $GITHUB_ENV
        env:
          PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}

  deploy-application:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
      
      # Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Build and push frontend image to DockerHub
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/todo-frontend:${{ env.DOCKER_IMAGE_VERSION }}
      
      # Build and push backend image to DockerHub
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/todo-backend:${{ env.DOCKER_IMAGE_VERSION }}
      
      # Verify deployment
      - name: Verify deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 120  # Give more time for instances to pull new images
          
          # Test if the application is responding
          curl -f http://${{ env.ALB_DNS_NAME }}/health || exit 1
          
          echo "Deployment successful! Application is available at http://${{ env.ALB_DNS_NAME }}"
